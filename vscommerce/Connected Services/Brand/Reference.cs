//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vscommerce.Brand {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Brand", Namespace="http://schemas.datacontract.org/2004/07/dbManager.vscommerceDB")]
    [System.SerializableAttribute()]
    public partial class Brand : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Manager")]
    [System.SerializableAttribute()]
    public partial class ManagerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Brand.IBrandManager")]
    public interface IBrandManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/getBrands", ReplyAction="http://tempuri.org/IBrandManager/getBrandsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(vscommerce.Brand.ManagerFault), Action="http://tempuri.org/IBrandManager/getBrandsManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Manager")]
        vscommerce.Brand.Brand[] getBrands(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/getBrands", ReplyAction="http://tempuri.org/IBrandManager/getBrandsResponse")]
        System.Threading.Tasks.Task<vscommerce.Brand.Brand[]> getBrandsAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/getBrandById", ReplyAction="http://tempuri.org/IBrandManager/getBrandByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(vscommerce.Brand.ManagerFault), Action="http://tempuri.org/IBrandManager/getBrandByIdManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Manager")]
        vscommerce.Brand.Brand getBrandById(string email, string password, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/getBrandById", ReplyAction="http://tempuri.org/IBrandManager/getBrandByIdResponse")]
        System.Threading.Tasks.Task<vscommerce.Brand.Brand> getBrandByIdAsync(string email, string password, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/updateBrand", ReplyAction="http://tempuri.org/IBrandManager/updateBrandResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(vscommerce.Brand.ManagerFault), Action="http://tempuri.org/IBrandManager/updateBrandManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Manager")]
        bool updateBrand(string email, string password, vscommerce.Brand.Brand brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/updateBrand", ReplyAction="http://tempuri.org/IBrandManager/updateBrandResponse")]
        System.Threading.Tasks.Task<bool> updateBrandAsync(string email, string password, vscommerce.Brand.Brand brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/createBrand", ReplyAction="http://tempuri.org/IBrandManager/createBrandResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(vscommerce.Brand.ManagerFault), Action="http://tempuri.org/IBrandManager/createBrandManagerFaultFault", Name="ManagerFault", Namespace="http://schemas.datacontract.org/2004/07/Manager")]
        bool createBrand(string email, string password, vscommerce.Brand.Brand brand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManager/createBrand", ReplyAction="http://tempuri.org/IBrandManager/createBrandResponse")]
        System.Threading.Tasks.Task<bool> createBrandAsync(string email, string password, vscommerce.Brand.Brand brand);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrandManagerChannel : vscommerce.Brand.IBrandManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrandManagerClient : System.ServiceModel.ClientBase<vscommerce.Brand.IBrandManager>, vscommerce.Brand.IBrandManager {
        
        public BrandManagerClient() {
        }
        
        public BrandManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrandManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrandManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrandManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public vscommerce.Brand.Brand[] getBrands(string email, string password) {
            return base.Channel.getBrands(email, password);
        }
        
        public System.Threading.Tasks.Task<vscommerce.Brand.Brand[]> getBrandsAsync(string email, string password) {
            return base.Channel.getBrandsAsync(email, password);
        }
        
        public vscommerce.Brand.Brand getBrandById(string email, string password, int ID) {
            return base.Channel.getBrandById(email, password, ID);
        }
        
        public System.Threading.Tasks.Task<vscommerce.Brand.Brand> getBrandByIdAsync(string email, string password, int ID) {
            return base.Channel.getBrandByIdAsync(email, password, ID);
        }
        
        public bool updateBrand(string email, string password, vscommerce.Brand.Brand brand) {
            return base.Channel.updateBrand(email, password, brand);
        }
        
        public System.Threading.Tasks.Task<bool> updateBrandAsync(string email, string password, vscommerce.Brand.Brand brand) {
            return base.Channel.updateBrandAsync(email, password, brand);
        }
        
        public bool createBrand(string email, string password, vscommerce.Brand.Brand brand) {
            return base.Channel.createBrand(email, password, brand);
        }
        
        public System.Threading.Tasks.Task<bool> createBrandAsync(string email, string password, vscommerce.Brand.Brand brand) {
            return base.Channel.createBrandAsync(email, password, brand);
        }
    }
}
